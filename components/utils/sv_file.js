require("dotenv").config();
const fs = require("fs");
const path = require("path");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const createFileIfNotExists = (filePath, content) => {
  if (!fs.existsSync(filePath)) {
    console.log(`I have created a new file here: ${filePath}`);
    fs.writeFileSync(filePath, content, { encoding: "utf8", flag: "wx" });
  }
};

const createFilesForPage = (pageBaseName) => {
  const htmlFileName = `${pageBaseName}.html`;
  const cssFileName = `${pageBaseName}.css`;
  const jsFileName = `cl_${pageBaseName}.js`;
  const routeName = `sv_${pageBaseName}.js`;

  const publicPath = path.join(__dirname, "../../public");
  const routePath = path.join(__dirname, "../../routes");
  const htmlFilePath = path.join(publicPath, "html", htmlFileName);
  const cssFilePath = path.join(publicPath, "css", cssFileName);
  const jsFilePath = path.join(publicPath, "js", jsFileName);
  const routeFilePath = path.join(routePath, routeName);

  const includeDevelopmentPrint = process.env.DEVELOPMENT_PRINT === "true";

  const htmlContent = `${
    includeDevelopmentPrint
      ? `<!-- GENERATED BY SYSTEM!
> npm start
> ${process.env.WEBSITE_URL}:${process.env.WEBSITE_PORT}/${pageBaseName}
-->`
      : `<!-- GENERATED BY SYSTEM -->`
  }
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="css/${cssFileName}">
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
  />
  <title>${pageBaseName}</title>
  <link rel="icon" href="../images/${pageBaseName}.png" type="image/png" />
</head>
<body>
  <h1>Welcome to ${pageBaseName}</h1>
  <p>This is a generated page</p>
    <!-- Makes CRUD Possible -->
    <script src="js/global/cl_request.js"></script>
  <script src="js/${jsFileName}"></script>
</body>
</html>
  `;

  const cssContent = `${
    includeDevelopmentPrint
      ? `/* 
GENERATED BY SYSTEM!
> npm start
> ${process.env.WEBSITE_URL}:${process.env.WEBSITE_PORT}/${pageBaseName}/css/${pageBaseName}.css
*/`
      : `/* 
GENERATED BY SYSTEM 
*/`
  }
* {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  list-style: none;
  font-family: "Maax-Regular";
  text-decoration: none;
  color: black;
  cursor: auto;
}

@font-face {
  font-family: "Maax-Regular";
  src: url(../fonts/maax-regular.woff2);
}
@font-face {
  font-family: "Maax-Medium";
  src: url(../fonts/maax-medium.woff2);
}
@font-face {
  font-family: "Maax-Bold";
  src: url(../fonts/maax-bold.woff2);
}

body {
  width: 100%;
  height: 100vh;
}
  `;

  const jsContent = `${
    includeDevelopmentPrint
      ? `// GENERATED BY SYSTEM
// > npm start
// > ${process.env.WEBSITE_URL}:${process.env.WEBSITE_PORT}/${pageBaseName}/js/${pageBaseName}.js`
      : `// GENERATED BY SYSTEM`
  }
const baseUrl = window.location.href.split("/").slice(0, 3).join("/");
const advancedUrl = baseUrl + "/${pageBaseName}";

// Fetches everything inside users
const server = "fetch";
const method = server === "update" ? "PATCH" : "POST";
const table = "users";
const data = {};
const change = {};

makeServerRequest(server, method, table, data, change).then((data) => {
  if (data.type === "ERROR") {
    test = confirm(
      server + " failder, " + data.msg + "! Want to see our documentation?"
    );
    if (test) {
      window.location.href = baseUrl + "/explain";
    }
    return;
  } else {
    console.log(data);
    test = confirm(server + " was a succes! Want to see our documentation?");
    if (test) {
      window.location.href = baseUrl + "/explain";
    }
  }
});
  `;

  const routeContent = `${
    includeDevelopmentPrint
      ? `<!-- GENERATED BY SYSTEM!-->`
      : `<!-- GENERATED BY SYSTEM -->`
  }
const express = require("express");
const path = require("path");

const router = express.Router();
router.use(express.static(path.join(__dirname, "../public")));

module.exports = function (pageName, exportMysql) {
  pageName = pageName.replace("sv_", "").replace(".js", ".html");

  router.get("/test", (req, res) => {
    res.json({ message: "Server is connected to client!" });
  });

  router.get("/", (req, res) => {
   res.sendFile(path.join(__dirname, "../public/html/" + pageName));
  });

  return router;
};
  `;

  createFileIfNotExists(htmlFilePath, htmlContent);
  createFileIfNotExists(cssFilePath, cssContent);
  createFileIfNotExists(jsFilePath, jsContent);
  createFileIfNotExists(routeFilePath, routeContent);
};

rl.question("Enter the base name for the page: ", (pageBaseName) => {
  createFilesForPage(pageBaseName);
  rl.close();
});
